#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, src) \
	if (eval) ++success; else {++failure; printf("\nfail: \"%s\"\n", src); }

int	test_ft_strcpy(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;

	char		*func = "ft_strcpy";
	printf("%s\t", func);
	{
		char	src[] = "basic strcpy";
		int		len= 20;
		char	*dst_1 = (char *)malloc(len);
		char	*dst_2 = (char *)malloc(len);
		char	*expect = (char *)strcpy(dst_1, src);
		char	*actual = (char *)ft_strcpy(dst_2, src);
		assert(strcmp(expect, actual) == 0, src);
		free(dst_1);
		free(dst_2);
	}
	{
		char	src[] = " \0don't copy me !  ";
		int		len = 20;
		char	*dst_1 = (char *)malloc(len);
		char	*dst_2 = (char *)malloc(len);
		char	*expect = (char *)strcpy(dst_1 + 1, src);
		char	*actual = (char *)ft_strcpy(dst_2 + 1, src);
		assert(strcmp(expect, actual) == 0, src);
		free(dst_1);
		free(dst_2);
	}
	{
		char	src[] = "";
		int		len = 20;
		char	*dst_1 = (char *)malloc(len);
		char	*dst_2 = (char *)malloc(len);
		char	*expect = (char *)strcpy(dst_1 + 1, src);
		char	*actual = (char *)ft_strcpy(dst_2 + 1, src);
		assert(strcmp(expect, actual) == 0, src);
		free(dst_1);
		free(dst_2);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
