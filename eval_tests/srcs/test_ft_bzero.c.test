#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, test) \
	if (eval) ++success; else {++failure; printf("\nfail: n = %d\n", test); }

int	test_ft_bzero(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_bzero";
	printf("%s\t", func);
	{
		int		num = 0;
		int		bound = num + 2;
		char	*expect = (char *)malloc(num);
		char	*actual = (char *)malloc(num);
		memset(expect, '0', bound);
		memset(actual, '0', bound);
		bzero(expect + 1, num);
		ft_bzero(actual + 1, num);
		assert(memcmp(expect, actual, bound) == 0, num);
	}
	{
		int		num = 2;
		int		bound = num + 2;
		char	*expect = (char *)malloc(num);
		char	*actual = (char *)malloc(num);
		memset(expect, '0', bound);
		memset(actual, '0', bound);
		bzero(expect + 1, num);
		ft_bzero(actual + 1, num);
		assert(memcmp(expect, actual, bound) == 0, num);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
