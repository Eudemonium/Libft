#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, test) \
	if (eval) ++success; else {++failure; printf("\nfail: \"%d\"\n", test); }

int	test_ft_isdigit(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_isdigit";
	printf("%s\t", func);
	{
		int		num = 000;
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = INT_MIN;
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = INT_MAX;
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = 177;
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = 'a';
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = 128;
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = '0';
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	{
		int		num = '\t';
		int		expect = isdigit(num);
		int		actual = ft_isdigit(num);
		assert(expect == actual, num);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
