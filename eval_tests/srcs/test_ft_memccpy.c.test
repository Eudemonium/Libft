#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, src, c, len) \
	if (eval) ++success; else {++failure; printf("\nfail: \"%s: ('%c', %lu)\"\n", src, c, len); }

int	test_ft_memccpy(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_memccpy";
	printf("%s\t", func);
	{
		char	src[] = "basic memccpy";
		char	c = 'm';
		char	*dst_1 = (char *)malloc(23);
		char	*dst_2 = (char *)malloc(23);
		dst_1 = memset(dst_1, '0', 23);
		dst_2 = memset(dst_2, '0', 23);
		char	*expect = (char *)memccpy(dst_1, src, c, strlen(src) + 1);
		char	*actual = (char *)ft_memccpy(dst_2, src, c, strlen(src) + 1);
		assert(strcmp(expect, actual) == 0 && strcmp(dst_1, dst_2) == 0, src, c, strlen(src) + 1);
	}
	{
		char	src[] = "m zero bytes";
		char	c = 'm';
		char	*dst_1 = (char *)malloc(21);
		char	*dst_2 = (char *)malloc(21);
		dst_1 = memset(dst_1, '0', 23);
		dst_2 = memset(dst_2, '0', 23);
		char	*expect = (char *)memccpy(dst_1, src, c, 0);
		char	*actual = (char *)ft_memccpy(dst_2, src, c, 0);
		assert(expect == actual && strcmp(dst_1, dst_2) == 0, src, c, (unsigned long)0);
	}
	{
		char	src[] = "c not found";
		char	c = 'm';
		char	*dst_1 = (char *)malloc(21);
		char	*dst_2 = (char *)malloc(21);
		dst_1 = memset(dst_1, '0', 21);
		dst_2 = memset(dst_2, '0', 21);
		char	*expect = (char *)memccpy(dst_1, src, c, strlen(src) + 1);
		char	*actual = (char *)ft_memccpy(dst_2, src, c, strlen(src) + 1);
		assert(expect == actual && strcmp(dst_1, dst_2) == 0, src, c, strlen(src) + 1);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
