#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, src) \
	if (eval) ++success; else {++failure; printf("fail: \"%s\"\n", src); }

int	test_ft_strcat(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_strcat";
	printf("===== %s =====\n", func);
	{
		char	src[] = "dst[0] = NULL";
		char	*dst_1 = (char *)malloc(25);
		char	*dst_2 = (char *)malloc(25);
		dst_1 = memset(dst_1, ' ', 25);
		dst_2 = memset(dst_2, ' ', 25);
		dst_1[0] = '\0';
		dst_2[0] = '\0';
		char	*expect = strcat(dst_1, src);
		char	*actual = ft_strcat(dst_2, src);
		assert(memcmp(expect, actual, 25) == 0, src);
		free(dst_1);
		free(dst_2);
	}
	{
		char	src[] = "dst with multiple NULL";
		char	*dst_1 = (char *)malloc(30);
		char	*dst_2 = (char *)malloc(30);
		dst_1 = memset(dst_1, ' ', 30);
		dst_2 = memset(dst_2, ' ', 30);
		dst_1[2] = '\0';
		dst_2[2] = '\0';
		dst_1[5] = '\0';
		dst_2[5] = '\0';
		char	*expect = strcat(dst_1, src);
		char	*actual = ft_strcat(dst_2, src);
		assert(memcmp(expect, actual, 30) == 0, src);
		free(dst_1);
		free(dst_2);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
