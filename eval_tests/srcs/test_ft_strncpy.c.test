#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, src, len) \
	if (eval) ++success; else {++failure; printf("fail: \"%s\"(%d)\n", src, len); }

int	test_ft_strncpy(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_strncpy";
	printf("===== %s =====\n", func);
	{
		char	src[] = "basic string copy";
		char	*dst_1 = (char *)malloc(25);
		char	*dst_2 = (char *)malloc(25);
		dst_1 = memset(dst_1, '0', 25);
		dst_2 = memset(dst_2, '0', 25);
		char	*expect = strncpy(dst_1, src, 15);
		char	*actual = ft_strncpy(dst_2, src, 15);
		assert(memcmp(expect, actual, 25) == 0, src, 15);
		free(dst_1);
		free(dst_2);
	}
	{
		char	src[] = "basic string copy";
		char	*dst_1 = (char *)malloc(25);
		char	*dst_2 = (char *)malloc(25);
		dst_1 = memset(dst_1, '0', 25);
		dst_2 = memset(dst_2, '0', 25);
		char	*expect = strncpy(dst_1, src, 0);
		char	*actual = ft_strncpy(dst_2, src, 0);
		assert(memcmp(expect, actual, 25) == 0, src, 0);
		free(dst_1);
		free(dst_2);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
