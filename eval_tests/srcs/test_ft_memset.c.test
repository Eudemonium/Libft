#include "libft.h"
#include "libft_test.h"

#ifdef assert
#undef assert
#endif

#define assert(eval, test) \
	if (eval) ++success; else {++failure; printf("\nfail: n = %d\n", test); }

int	test_ft_memset(void)
{
	unsigned	success = 0;
	unsigned	failure = 0;
	char		*func = "ft_memset";
	printf("%s\t", func);
	{
		int		num = 0;
		int		bound = 3;
		char	*expect = (char *)malloc(bound);
		char	*actual = (char *)malloc(bound);
		bzero(expect, bound);
		bzero(actual, bound);
		memset(expect + 1, '0', num);
		ft_memset(actual + 1, '0', num);
		assert(memcmp(expect, actual, num) == 0, num);
	}
	{
		int		num = 2;
		int		bound = 4;
		char	*expect = (char *)malloc(bound);
		char	*actual = (char *)malloc(bound);
		bzero(expect, bound);
		bzero(actual, bound);
		memset(expect + 1, '\n', num);
		ft_memset(actual + 1, '\n', num);
		assert(memcmp(expect, actual, num) == 0, num);
	}
	{
		int		num = 3;
		int		bound = 5;
		char	*expect = (char *)malloc(bound);
		char	*actual = (char *)malloc(bound);
		bzero(expect, bound);
		bzero(actual, bound);
		memset(expect + 1, 8, num);
		ft_memset(actual + 1, 8, num);
		assert(memcmp(expect, actual, num) == 0, num);
	}
	printf("%i of %i tests passed.\n", success, (success + failure));
	return (failure == 0);
}
